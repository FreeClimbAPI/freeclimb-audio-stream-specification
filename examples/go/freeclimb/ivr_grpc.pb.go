//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@
//@@ A gRPC Interface for bidirectional streaming of IVR data between
//@@ Freeclimb platform and a given application instance.
//@@
//@@ FC serves as the gRPC client, the application as the gRPC server.
//@@
//@@ Upon receipt of a phone call, FC will invoke the bidirectional
//@@ streaming RPC and proceed to asynchornously send to application:
//@@     (1) notification that call has started
//@@     (2) notification of real-time audio stream data from the call
//@@     (3) notification of start of DTMF keypress detected on the call
//@@     (4) notification of end of DTMF keypress detected on the call
//@@     (5) notification that requested audio playback has started
//@@     (6) notification that requested audio playback has completed
//@@     (7) notification that the audio buffer has been cleared
//@@     (8) notification that requested DTMF keypress has started
//@@     (9) notification that requested DTMF keypress has completed
//@@     (10) notification that the call has ended
//@@     (11) notification that an error has occurred
//@@     (10) notification of the depth of the queried buffer
//@@
//@@ Application is then free to stream back to FC:
//@@     (1) instruction to play audio to call
//@@     (2) instruction to clear contents of audio buffer
//@@     (3) instruction to press DTMF digit to call
//@@     (4) instruction to disconnect call
//@@     (5) instruction to terminate Audio Stream and return to PerCL
//@@     (6) instruction to query audio and dtmf buffers
//@@
//@@ References:
//@@     * https://developers.google.com/protocol-buffers/docs/proto3
//@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: ivr.proto

package ivr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GRPCStreamService_SendIVRData_FullMethodName = "/freeclimb.GRPCStreamService/SendIVRData"
)

// GRPCStreamServiceClient is the client API for GRPCStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCStreamServiceClient interface {
	// Bidirectional communication between app and platform
	SendIVRData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PlatformMessage, AppMessage], error)
}

type gRPCStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCStreamServiceClient(cc grpc.ClientConnInterface) GRPCStreamServiceClient {
	return &gRPCStreamServiceClient{cc}
}

func (c *gRPCStreamServiceClient) SendIVRData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PlatformMessage, AppMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GRPCStreamService_ServiceDesc.Streams[0], GRPCStreamService_SendIVRData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PlatformMessage, AppMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GRPCStreamService_SendIVRDataClient = grpc.BidiStreamingClient[PlatformMessage, AppMessage]

// GRPCStreamServiceServer is the server API for GRPCStreamService service.
// All implementations must embed UnimplementedGRPCStreamServiceServer
// for forward compatibility.
type GRPCStreamServiceServer interface {
	// Bidirectional communication between app and platform
	SendIVRData(grpc.BidiStreamingServer[PlatformMessage, AppMessage]) error
	mustEmbedUnimplementedGRPCStreamServiceServer()
}

// UnimplementedGRPCStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGRPCStreamServiceServer struct{}

func (UnimplementedGRPCStreamServiceServer) SendIVRData(grpc.BidiStreamingServer[PlatformMessage, AppMessage]) error {
	return status.Errorf(codes.Unimplemented, "method SendIVRData not implemented")
}
func (UnimplementedGRPCStreamServiceServer) mustEmbedUnimplementedGRPCStreamServiceServer() {}
func (UnimplementedGRPCStreamServiceServer) testEmbeddedByValue()                           {}

// UnsafeGRPCStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCStreamServiceServer will
// result in compilation errors.
type UnsafeGRPCStreamServiceServer interface {
	mustEmbedUnimplementedGRPCStreamServiceServer()
}

func RegisterGRPCStreamServiceServer(s grpc.ServiceRegistrar, srv GRPCStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedGRPCStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GRPCStreamService_ServiceDesc, srv)
}

func _GRPCStreamService_SendIVRData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCStreamServiceServer).SendIVRData(&grpc.GenericServerStream[PlatformMessage, AppMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GRPCStreamService_SendIVRDataServer = grpc.BidiStreamingServer[PlatformMessage, AppMessage]

// GRPCStreamService_ServiceDesc is the grpc.ServiceDesc for GRPCStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "freeclimb.GRPCStreamService",
	HandlerType: (*GRPCStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendIVRData",
			Handler:       _GRPCStreamService_SendIVRData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ivr.proto",
}
